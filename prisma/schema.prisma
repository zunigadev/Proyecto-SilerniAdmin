// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "false"
}

model SequenceCounter {
  id       Int    @id @default(autoincrement())
  name     String @unique
  lastUsed Int
}

//Auntentication models
model User {
  idUser    Int    @id @default(autoincrement())
  name      String
  p_surname String
  m_surname String
  status    String

  //Relations Credential
  credential   Credential @relation(fields: [credentialId], references: [idCredential])
  credentialId Int        @unique

  roles         UserRole[]
  permissions   UserPermission[]
  loginAttempts LoginAttempt[]
  devices       Device[]
}

model LoginAttempt {
  id              Int      @id @default(autoincrement())
  timestamp       DateTime @default(now())
  location        String
  deviceType      String
  operatingSystem String
  browser         String
  success         Boolean
  ipAddress       String?
  userAgent       String?
  userId          Int
  user            User     @relation(fields: [userId], references: [idUser])

  @@index([userId])
}

model Device {
  id              Int      @id @default(autoincrement())
  timestamp       DateTime @default(now())
  deviceType      String
  operatingSystem String
  browser         String
  userId          Int
  user            User     @relation(fields: [userId], references: [idUser])
  uniqueDeviceId  String   @unique
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String
  enabled     Boolean          @default(true)
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id       Int              @id @default(autoincrement())
  effect   Boolean // true: allowed; false: deny
  name     String           @unique
  resource String
  action   String
  menus    Menu[]
  roles    RolePermission[]
  users    UserPermission[]
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String
  icon        String?
  link        String?
  submenus    Menu[]       @relation("Submenus")
  parent      Menu?        @relation("Submenus", fields: [parentId], references: [id])
  parentId    Int?         @default(dbgenerated())
  permissions Permission[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [idUser])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [idUser])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Credential {
  idCredential     Int     @id @default(autoincrement())
  code             String? @unique
  email            String? @unique
  emailVerified    Boolean @default(false)
  password         String
  repPassword      String
  refreshTokenId   String?
  emailTokenId     String?
  resetPassTokenId String?

  //Relations
  user             User?
  dataTutor        DataTutor?
  postulationChild PostulationChild?
}

// Define the DataTutor table
model DataTutor {
  idDataTutor  Int     @id @default(autoincrement()) @map("idDataTutor")
  name         String? @map("name")
  lastName     String? @map("lastName")
  documentType String? @map("documentType")
  document     String? @map("document")
  phone        String? @map("phone")
  relationship String? @map("relationship")
  email        String? @map("email") //Revisar
  gender       String? @map("gender")

  // Define the reverse relationship with PostulationChild
  postulationChild PostulationChild[]

  credential   Credential? @relation(fields: [credentialId], references: [idCredential])
  credentialId Int?        @unique

  @@map("DataTutor")
}

// Define the PostulationChild table
model PostulationChild {
  idPostulationChild   Int     @id @default(autoincrement()) @map("idPostulationChild")
  name                 String? @map("name")
  paternalLastName     String? @map("paternalLastName")
  maternalLastName     String? @map("maternalLastName")
  phone                String? @map("phone")
  birthDate            String? @map("birthDate")
  email                String? @map("email")
  address              String? @map("address")
  gender               String? @map("gender")
  grade                String? @map("grade")
  level                String? @map("level")
  dataTutorIdDataTutor Int     @map("DataTutor_idDataTutor")
  status               String  @default("sending") @map("postulationStatus")

  // Define the relationship with DataTutor
  dataTutor DataTutor @relation(fields: [dataTutorIdDataTutor], references: [idDataTutor])

  // Define the relationship with FilePostulation
  filesPostulations FilesPostulation[]

  // Define the relationship with  Credential
  credential   Credential? @relation(fields: [credentialId], references: [idCredential])
  credentialId Int?        @unique

  // Define the relationship with Reason
  reasons Reason[]

  @@map("PostulationChild")
}

// Reason for rejection
model Reason {
  idReason Int    @id @default(autoincrement())
  argument String

  // Define the relationship with PostulationChild
  postulationChild   PostulationChild? @relation(fields: [postulationChildId], references: [idPostulationChild])
  postulationChildId Int?

  @@map("Reason")
}

// Define the FilesPostulation table
model FilesPostulation {
  idFilesPostulation                 Int     @id @default(autoincrement()) @map("idFilesPostulation")
  name                               String? @map("name")
  link                               String? @map("link")
  postulationChildIdPostulationChild Int     @map("PostulationChild_idPostulationChild")

  // Define the relationship with PostulationChild
  postulationChild PostulationChild @relation(fields: [postulationChildIdPostulationChild], references: [idPostulationChild])

  @@map("FilesPostulation")
}

/// Payments with Stripe

// schema.prisma
model Payment {
  id             Int      @id @default(autoincrement())
  stripeChargeId String
  amount         Int
  currency       String
  description    String
  status         String
  customerEmail  String?
  created        DateTime @default(now())
}

model FullStripePayment {
  id                    Int      @id @default(autoincrement())
  stripeChargeId        String   @unique
  amount                Int
  amountCaptured        Int?
  amountRefunded        Int?
  applicationFeeAmount  Int?
  balanceTransaction    String?
  billingDetailsName    String?
  billingDetailsEmail   String?
  billingDetailsPhone   String?
  billingDetailsAddress Address? @relation(fields: [addressId], references: [id])
  currency              String
  customer              String?
  description           String
  failureCode           String?
  failureMessage        String?
  invoice               String?
  metadata              Json?
  paymentIntent         String?
  paymentMethod         String?
  receiptEmail          String?
  receiptUrl            String?
  refunded              Boolean  @default(false)
  status                String
  created               DateTime @default(now())
  addressId             Int?
}

model Address {
  id                Int                 @id @default(autoincrement())
  city              String?
  country           String?
  line1             String?
  line2             String?
  postalCode        String?
  state             String?
  FullStripePayment FullStripePayment[]
}
