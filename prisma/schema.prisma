// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "false"
}

model SequenceCounter {
  id       Int    @id @default(autoincrement())
  name     String @unique
  lastUsed Int
}

//Auntentication models
model User {
  idUser    Int    @id @default(autoincrement())
  name      String
  p_surname String
  m_surname String
  status    String

  //Relations Credential
  credential   Credential @relation(fields: [credentialId], references: [idCredential])
  credentialId Int        @unique

  role    Role @relation(fields: [role_id], references: [id])
  role_id Int  

  // createdMenus Menu[] @relation("access_user")
}

model Credential {
  idCredential Int     @id @default(autoincrement())
  code         String? @unique
  email        String? @unique
  password     String
  repPassword  String

  //Relations
  user             User?
  dataTutor        DataTutor?
  postulationChild PostulationChild?
}

// Define the DataTutor table
model DataTutor {
  idDataTutor  Int     @id @default(autoincrement()) @map("idDataTutor")
  name         String? @map("name")
  lastName     String? @map("lastName")
  documentType String? @map("documentType")
  document     String? @map("document")
  phone        String? @map("phone")
  relationship String? @map("relationship")
  email        String? @map("email")
  gender       String? @map("gender")

  // Define the reverse relationship with PostulationChild
  postulationChild PostulationChild[]

  credential   Credential? @relation(fields: [credentialId], references: [idCredential])
  credentialId Int?        @unique

  @@map("DataTutor")
}

// Define the PostulationChild table
model PostulationChild {
  idPostulationChild   Int     @id @default(autoincrement()) @map("idPostulationChild")
  name                 String? @map("name")
  paternalLastName     String? @map("paternalLastName")
  maternalLastName     String? @map("maternalLastName")
  phone                String? @map("phone")
  birthDate            String? @map("birthDate")
  email                String? @map("email")
  address              String? @map("address")
  gender               String? @map("gender")
  justification        String? @map("justification")
  grade                String? @map("grade")
  postulationChildCol  String? @map("PostulationChildcol")
  level                String? @map("level")
  dataTutorIdDataTutor Int     @map("DataTutor_idDataTutor")
  status               String  @default("sending") @map("postulationStatus")

  // Define the relationship with DataTutor
  dataTutor         DataTutor          @relation(fields: [dataTutorIdDataTutor], references: [idDataTutor])
  filesPostulations FilesPostulation[]

  credential   Credential? @relation(fields: [credentialId], references: [idCredential])
  credentialId Int?        @unique

  @@map("PostulationChild")
}

// Define the FilesPostulation table
model FilesPostulation {
  idFilesPostulation                 Int     @id @default(autoincrement()) @map("idFilesPostulation")
  name                               String? @map("name")
  link                               String? @map("link")
  postulationChildIdPostulationChild Int     @map("PostulationChild_idPostulationChild")

  // Define the relationship with PostulationChild
  postulationChild PostulationChild @relation(fields: [postulationChildIdPostulationChild], references: [idPostulationChild])

  @@map("FilesPostulation")
}

//Permission and Roles 
model Role {
  id         Int       @unique @default(autoincrement())
  name       String    
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  Permission Permission[]
  User       User[]

  @@map("roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  role       Role    @relation(fields: [role_id], references: [id])
  role_id    Int     
  action     String  
  subject    String  
  inverted   Boolean @default(false)
  conditions Json?   
  reason     String? @db.Text()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  @@map("permissions")
}

// //Modules //Test
// model Menu {
//   id   Int    @unique @default(autoincrement())
//   name String 

//   created_user User @relation(name: "access_user", fields: [access_by], references: [idUser])
//   created_by   Int  

//   @@map("menus")
// }


