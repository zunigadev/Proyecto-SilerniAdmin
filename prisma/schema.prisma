// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "false"
}

//Auntentication models
model User {
  idUser Int     @id @default(autoincrement())
  name   String
  p_surname String
  m_surname String
  status String 

  //Relations
  credential Credential @relation(fields: [credentialId], references: [idCredential])
  credentialId Int @unique

}

model Credential {
  idCredential Int @id @default(autoincrement())
  code String? @unique 
  email String? @unique
  password String?  
  repPassword String? 

  //Relations
  user User? 
}



// Define the DataTutor table
model DataTutor {
  idDataTutor     Int    @id @default(autoincrement()) @map("idDataTutor")
  name            String?   @map("name")
  lastName        String?   @map("lastName")
  documentType    String?   @map("documentType")
  document        String?   @map("document")
  phone           String?   @map("phone")
  relationship    String?   @map("relationship")
  email           String?   @map("email")
  gender          String?   @map("gender")

  // Define the reverse relationship with PostulationChild
  postulationChild PostulationChild[]

  @@map("DataTutor")
}

// Define the PostulationChild table
model PostulationChild {
  idPostulationChild     Int      @id @default(autoincrement()) @map("idPostulationChild")
  name                   String?  @map("name")
  paternalLastName       String?  @map("paternalLastName")
  maternalLastName       String?  @map("maternalLastName")
  phone                  String?  @map("phone")
  birthDate              String?  @map("birthDate")
  email                  String?  @map("email")
  address                String?  @map("address")
  gender                 String?  @map("gender")
  justification          String?  @map("justification")
  grade                  String?  @map("grade")
  postulationChildCol    String?  @map("PostulationChildcol")
  level                  String?  @map("level")
  dataTutorIdDataTutor   Int      @map("DataTutor_idDataTutor")
  status                 String   @map("postulationStatus") @default("sending")

  // Define the relationship with DataTutor
  dataTutor              DataTutor  @relation(fields: [dataTutorIdDataTutor], references: [idDataTutor])
  filesPostulations                 FilesPostulation[]


  @@map("PostulationChild")
}



// Define the FilesPostulation table
model FilesPostulation {
  idFilesPostulation                Int             @id @default(autoincrement()) @map("idFilesPostulation")
  name                              String?         @map("name")
  link                              String?         @map("link")
  postulationChildIdPostulationChild Int             @map("PostulationChild_idPostulationChild")

  // Define the relationship with PostulationChild
  postulationChild                   PostulationChild @relation(fields: [postulationChildIdPostulationChild], references: [idPostulationChild])

  @@map("FilesPostulation")
}




